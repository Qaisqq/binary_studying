Topics to Cover
1. Introduction to Number Systems
• Overview of different number systems (Decimal, Binary, Octal, Hexadecimal)
• Importance of number systems in computing

-- Overview of different number systems (Decimal, Binary, Octal, Hexadecimal):
    A number system is a method of representing values on a numberline by using symbols, and rules.
    These symbols are 0,1,2,3,4,5,6,7,8,9 and are called digits
    The four common number types are:
        Binary :        Base 2      -> 0, 1
        Octal :         Base 8      -> 0, 1, 2, 3, 4, 5, 6, 7
        Decimal:        Base 10     -> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
        Hexadecimal :   Base 16     -> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F

-- Importance of number systems in computing:
    -Representing data: binary is used to represent transistor states
                        where as hexadecimal is used to represent those same binary numbers, but on a bigger scale
                        decimal is used for when we need to discern numbers visually and work with them
    -memory optimziation:   
                some number systems simply require less data to representsome values as compared to other number systems
                so theres an aspect of optmizaing your memory allocation if you used different number systems for different data


2. Binary:         <Bi for two>
    Used to explain tasks to a computer, since theres only two states 0 and 1
    These two states represente the two states of a transistor, 0 = no current // 1 = current passsed through
    Each digit in a binary number is called a single Bit
    -A representation of decimal to binary:
        Decimal -> Binary
        0 -> 0, 1 -> 1
        2 -> 10, 3 -> 11
        4 -> 100, 5 -> 101, 6 -> 110, 7 -> 111
        8 -> 1000, 9 -> 1001, 10 -> 1010, 11 - > 1010, 12 -> 1100, 13 -> 1101, 14 -> 1110, 15 -> 1111
        16 -> 10000 etc

    -Binary vs Decimal:
        Base:
            B: base-2
            D: base-10
        representation:
            B: 2^0 2^1 2^2 2^3
            D: 10^0 10^1 10^2 10^3
        usage:
            B: digital and electronic devices use it as a fundemental number system, because of digital logic circuits
            D: best used for human familiarity, used for human calcuations, and data representation, when humans need readibility and precision
        size:
            B: less space efficient, needs more digits to represent same data as decimal
            D: more space-efficient, needs less digits to represent same data as binary

3. Bit?:
    -A bit is: 
            a single binary digit, which is either a 0 or 1
            0 is a bit// 01 is two bits
            bits is the fundemental building block of ALL digital information

    -A byte is:
            00000000 is 8 bits, which is called a byte, if theyre all full
            11111111 its the max value of a byte which is 255 in decimal

    -Binary place values:
            In the binary number system, each digit's place value corresponds to a power of 2. The rightmost digit represents the least significant bit (LSB)
            while the leftmost digit represents the most significant bit (MSB). Here's how binary place values work:

            MSB (Most Significant Bit):
                                    This is the leftmost digit in a binary number and holds the highest place value.

            LSB (Least Significant Bit):
                                    This is the rightmost digin in a binary number and holds the smallests place value.
            Place Values:
                        Moving from right to left, each successive digit's place value doubles.
                        It starts with 1 for the rightmost bit (also called the 1's place), then 2 for the next bit (2's place), 4 for the next (4's place), and so on.

                ... 128  64  32  16   8   4   2   1   (Place values).2
                ...   0   0   0   0   1   1   0   1   (Example binary number)
                ______________________________________
                                      8 + 4     + 1
                     15 Decimal == 1101 Binary


                ... 4096   512   64   8   1   (Place values).8
                ...   0     1     1   0   1   (Example binary number)
                ______________________________________
                           1000   100    001
                     1101 Binary == 1000100001 Octal
4. Converting Between Number Systems:
    - All conversions will be in python file named conversions

5. Binary Arithemtics:
    - Addition of binary numbers:
        TLDR: cary over 1+1 and thats it for addition
    - Substraction of binary numbers: 
        TLDR: borrow when needed and turn borrowed number into 0, and the previous one into 2
    - multiplication of binary numbers:
        TLDR: standard multiplication table, then unique addition
    - divison of binary numbers:
        TLDR: standard divison table, then unique substraction

6. Signed Binary Numbers:
    - Understanding positive and negative binary numbers:
        In real life numbers arent signed, all numbers are taken as positive unless theyre signed with a -
        the same goes for how we've been using binary

        Method 1 : Sign And Magnitude

        We want to sign binary numbers now, but its diffcult since a bit is only a logic indiccation of 0 and 1
        to work around this, we use a new method using the MSB (most significant bit) as the indicator fo whether a binary 
        number is positive or negative:  if the MSB is 0 -> positive
                                         if the MSB is 1 -> negative
        example:
                [0][0101101]
                 +    45      =  45
                [1][0101101]
                 -    45      = -45
    - Ones' Complement representation:
        Method 2: 
            Here the positive numbers are the same as Sign and Magnitude, and are called non-complemented values
            The negative values are "inverted" or "negated", the inversion of 0 is 1, and 1 is 0
            using inverters, this is an example
            0 1 1 0 1 1 0 1 
            I N V E R T E R
            _______________
            1 0 0 1 0 0 1 0    <- Ones' Complement

            This method helps in addition and substraction example:
                108 - 45 :
                108 in bi = 01101100    < we add a trailing 0 to indicate positive
                45 in bi =  00101101     < we add a trailing 0 to indicate positive, and another one to match 108

                we invert 45 / 00101101 to -45 / 11010010 
                we substract the numbers now
                            01101100
                            01010010
                            ________
overflow indicating +/- ->[1]00111110
    - Two's Complement:
     The two’s complement is another method to represent the negative binary number in a signed binary number system.
     Just like Sign-and-Magnitude and One’s Complement methods, the positive binary numbers remain unchanged. 
     Whereas, a negative number in two’s complement method is one’s complemented plus (+) “1” to the least significant bit (LSB). 
     The negative binary number when added to its counterpart positive number results in zero. The two’s complement does not include
     the double zeros issue which was observed in Sign-and-Magnitude and One’s Complement methods. Further,
     it is much easier to obtain two’s complement making arithmetic operations relatively much easier.

     Using the previous example of one’s complement, the two’s complement of (45 = 00101101) is obtained by
     first getting one’s complement and adding “1” to it i.e. (11010010 + 00000001 = 11010011).
     The two’s complement of 45 equals -45 in a signed binary number
     example:
        01101100   108
      + 11010011   -45
      __________
       100111111    < WE DISCARD THE OVERFLOW
        111111 = 32 + 16 + 8 + 4 + 2 + 1 = 63

    - Arhithmetic operations with signed binary numbers:
        This was detailed in the three previous segments.

        TABLE OF 4 BIT SIGNED BINARY NUMBERS OF THE THREE METHODS:
            Decimal   Signed Mag    Signed Ones    Signed two’s
            +7        0111          0111           0111
            +6        0110          0110           0110
            +5        0101          0101           0101
            +4        0100          0100           0100
            +3        0011          0011           0011
            +2        0010          0010           0010
            +1        0001          0001           0001
            +0        0000          0000           0000
            -0        1000          1111            --
            -1        1001          1110           1111
            -2        1010          1101           1110
            -3        1011          1100           1101
            -4        1100          1011           1100
            -5        1101          1010           1011
            -6        1110          1001           1010
            -7        1111          1000           1001

7. Binary Coded Decimal (BCD):
    - Definition and uses of BCD:
        The Binary Coded Decimal is a 4-bit binary number coded to represent specifically a decimal number.
        The “coded” refers to the process of assigning a specific or unique binary code to a particular decimal number.
        Example: 
         Represent 356 in decimal in, binary and bcd:
            356 DECIMAL 
            1 2 4 8 16 32 64 128 256
            0 0 0 1  1  0  1  0   1  
            000110101 BINARY
             3    5    6
            0011 0101 0110 BCD

             [[ 356 Decimal // 000110101 Binary // 0011 0101 0110 BCD  ]]
    
    - Convert Binary to Bcd
        Arthimetically it is done by first converting it to decimal, then writing each numbers binary representation 
        in a row

        Python code will be a function in the file conversions.py 

resources:
 https://www.youtube.com/watch?v=JS40jPaogM4 <- number systems
 https://www.youtube.com/watch?v=VLflTjd3lWA&list=PL0o_zxa4K1BXCpQbUdf0htZE8SS0PYjy- <- converting binary numbers
 https://www.youtube.com/watch?v=C5EkxfNEMjE <- binary addition and substraction 
 https://www.youtube.com/watch?v=xHWKYFhhtJQ <- binary multiplication 
 https://www.youtube.com/watch?v=VKemv9u40gc <- binary divison 
 https://www.electronics-lab.com/article/signed-binary-numbers/ <- signed binary numbers
 https://www.youtube.com/watch?v=AM0tr8Kyvzg <- decimal to BCD coversion
 https://www.youtube.com/watch?v=enXh5tSmMg4 <- Binary to BCD conversion (IN MINECRAFT)
 https://www.youtube.com/watch?v=eXIfZ1yKFlA < Binary to bcd (double dabble)
 https://gist.github.com/baryluk/082771648b8b24a2c04fccff0c45ba22 < python double dabble

 2414 
 
 decimal 2 1
 ocat   4 2 1
 hexa   8 4 2 1
